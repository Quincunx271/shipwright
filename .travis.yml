dist: xenial
language: cpp

matrix:
  include:
    - os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-6.0
          packages:
            - g++-8 # Gets newer version of libstdc++
            - clang-6.0
      env:
        - C_COMPILER='clang-6.0'
        - CXX_COMPILER='clang++-6.0'
        - BUILD_TYPE=Debug

    - os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-7
          packages:
            - g++-8 # Gets newer version of libstdc++
            - clang-7
      env:
        - C_COMPILER='clang-7'
        - CXX_COMPILER='clang++-7'
        - BUILD_TYPE=Debug

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env:
        - C_COMPILER='gcc-7'
        - CXX_COMPILER='g++-7'
        - BUILD_TYPE=Debug

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - C_COMPILER='gcc-8'
        - CXX_COMPILER='g++-8'
        - BUILD_TYPE=Debug

    - os: osx
      osx_image: xcode10
      env:
        - C_COMPILER=clang
        - CXX_COMPILER=clang++
        - PATH=$PATH:$HOME/Library/Python/3.7/bin
        - BUILD_TYPE=Debug

before_install:
  - export CC=$C_COMPILER
  - export CXX=$CXX_COMPILER

install:
  # Install newer cmake
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
      brew upgrade cmake
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      travis_retry wget https://github.com/Kitware/CMake/releases/download/v3.14.4/cmake-3.14.4-Linux-x86_64.sh
      sh ./cmake-3.14.4-Linux-x86_64.sh --prefix=$HOME --skip-license
    fi
  - cmake --version
  - export PYENV_VERSION=$(pyenv versions | grep '3.' | sort --reverse | head -n 1 | xargs)
  - pyenv versions
  # Install conan (Travis specific; PMM would normally handle this)
  - pip3 install conan --user
  - conan --version
  - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
  # Install flex and bison
  - conan info .
  - export FLEX_PACKAGE_REFERENCE=$(conan info . --only None --package-filter flex*)
  - export BISON_PACKAGE_REFERENCE=$(conan info. --only None --package-filter bison*)
  - echo $FLEX_PACKAGE_REFERENCE
  - echo $BISON_PACKAGE_REFERENCE
  # Install flex explicitly (find_program prefers system /usr/bin/flex)
  - CC=$(which gcc-8) CXX=$(which g++-8) conan install $FLEX_PACKAGE_REFERENCE
  - conan info $FLEX_PACKAGE_REFERENCE --paths
  - ls $(conan info $FLEX_PACKAGE_REFERENCE --paths | grep flex | grep package_folder | sed 's/\s*package_folder:\s*//')
  - export FLEX_EXECUTABLE=$(conan info $FLEX_PACKAGE_REFERENCE --paths | grep flex | grep package_folder | sed 's/\s*package_folder:\s*//')/bin/flex
  - echo $FLEX_EXECUTABLE
  - $FLEX_EXECUTABLE --version

before_script:
  # Configure, which would install dependencies via PMM
  - mkdir build && cd build
  - cmake ..
    -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    -DCMAKE_CXX_COMPILER=$CXX_COMPILER
    -DCMAKE_C_COMPILER=$C_COMPILER
    -DCMAKE_CXX_FLAGS_INIT=-Werror
    -DFLEX_EXECUTABLE=$FLEX_EXECUTABLE

script:
  - cmake --build . -j
  - ctest --output-on-failure
